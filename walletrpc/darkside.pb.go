// Code generated by protoc-gen-go. DO NOT EDIT.
// source: darkside.proto

package walletrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DarksideLightwalletdState struct {
	StartHeight          int32    `protobuf:"varint,1,opt,name=startHeight,proto3" json:"startHeight,omitempty"`
	SaplingActivation    int32    `protobuf:"varint,2,opt,name=saplingActivation,proto3" json:"saplingActivation,omitempty"`
	BranchID             string   `protobuf:"bytes,3,opt,name=branchID,proto3" json:"branchID,omitempty"`
	ChainName            string   `protobuf:"bytes,4,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Blocks               []string `protobuf:"bytes,5,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DarksideLightwalletdState) Reset()         { *m = DarksideLightwalletdState{} }
func (m *DarksideLightwalletdState) String() string { return proto.CompactTextString(m) }
func (*DarksideLightwalletdState) ProtoMessage()    {}
func (*DarksideLightwalletdState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ea18aa1b2b1f163, []int{0}
}

func (m *DarksideLightwalletdState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DarksideLightwalletdState.Unmarshal(m, b)
}
func (m *DarksideLightwalletdState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DarksideLightwalletdState.Marshal(b, m, deterministic)
}
func (m *DarksideLightwalletdState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DarksideLightwalletdState.Merge(m, src)
}
func (m *DarksideLightwalletdState) XXX_Size() int {
	return xxx_messageInfo_DarksideLightwalletdState.Size(m)
}
func (m *DarksideLightwalletdState) XXX_DiscardUnknown() {
	xxx_messageInfo_DarksideLightwalletdState.DiscardUnknown(m)
}

var xxx_messageInfo_DarksideLightwalletdState proto.InternalMessageInfo

func (m *DarksideLightwalletdState) GetStartHeight() int32 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *DarksideLightwalletdState) GetSaplingActivation() int32 {
	if m != nil {
		return m.SaplingActivation
	}
	return 0
}

func (m *DarksideLightwalletdState) GetBranchID() string {
	if m != nil {
		return m.BranchID
	}
	return ""
}

func (m *DarksideLightwalletdState) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *DarksideLightwalletdState) GetBlocks() []string {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*DarksideLightwalletdState)(nil), "cash.z.wallet.sdk.rpc.DarksideLightwalletdState")
}

func init() {
	proto.RegisterFile("darkside.proto", fileDescriptor_5ea18aa1b2b1f163)
}

var fileDescriptor_5ea18aa1b2b1f163 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0x7f, 0xff, 0x16, 0x3b, 0xa5, 0xa2, 0x03, 0x4a, 0x0c, 0x05, 0x43, 0x41, 0xc8,
	0x42, 0x86, 0xa2, 0x4b, 0x57, 0x4a, 0x45, 0x0b, 0xe2, 0x22, 0x75, 0xe5, 0xee, 0x66, 0x32, 0x24,
	0x63, 0x92, 0x49, 0x98, 0xb9, 0xb4, 0xe8, 0xbb, 0xf9, 0x36, 0x3e, 0x88, 0x34, 0x49, 0x35, 0xa0,
	0x71, 0x79, 0xcf, 0x77, 0xee, 0xcc, 0xe1, 0x5c, 0xba, 0x1f, 0x81, 0x49, 0xad, 0x8a, 0x24, 0x2f,
	0x4d, 0x81, 0x05, 0x3b, 0x12, 0x60, 0x13, 0xfe, 0xc6, 0x37, 0x90, 0x65, 0x12, 0xb9, 0x8d, 0x52,
	0x6e, 0x4a, 0xe1, 0x4e, 0xac, 0x34, 0x6b, 0x25, 0x1a, 0xd7, 0xec, 0x9d, 0xd0, 0x93, 0x45, 0xb3,
	0xf8, 0xa0, 0xe2, 0x04, 0x6b, 0x7b, 0xb4, 0x42, 0x40, 0xc9, 0x3c, 0x3a, 0xb6, 0x08, 0x06, 0xef,
	0xe5, 0x16, 0x39, 0xc4, 0x23, 0xfe, 0x20, 0x68, 0x4b, 0xec, 0x9c, 0x1e, 0x5a, 0x28, 0x33, 0xa5,
	0xe3, 0x6b, 0x81, 0x6a, 0x0d, 0xa8, 0x0a, 0xed, 0xfc, 0xab, 0x7c, 0x3f, 0x01, 0x73, 0xe9, 0x5e,
	0x68, 0x40, 0x8b, 0x64, 0xb9, 0x70, 0xfa, 0x1e, 0xf1, 0x47, 0xc1, 0xd7, 0xcc, 0xa6, 0x74, 0x24,
	0x12, 0x50, 0xfa, 0x11, 0x72, 0xe9, 0xfc, 0xaf, 0xe0, 0xb7, 0xc0, 0x8e, 0xe9, 0x30, 0xcc, 0x0a,
	0x91, 0x5a, 0x67, 0xe0, 0xf5, 0xfd, 0x51, 0xd0, 0x4c, 0x17, 0x1f, 0x84, 0x1e, 0xec, 0xf2, 0xaf,
	0xd0, 0x48, 0xc8, 0xa5, 0x61, 0x2f, 0xf4, 0x74, 0xa7, 0xdd, 0x49, 0x5c, 0x6a, 0x51, 0xe4, 0x4a,
	0xc7, 0x4f, 0x06, 0xb4, 0x05, 0xb1, 0x0d, 0x62, 0xd9, 0x94, 0xff, 0x5a, 0x0f, 0xbf, 0xcd, 0x4b,
	0x7c, 0x75, 0xcf, 0x3a, 0x68, 0x00, 0x9b, 0xd6, 0x2b, 0xb3, 0xde, 0x9c, 0xb0, 0xa8, 0xf5, 0xbf,
	0xc4, 0xba, 0xb6, 0x79, 0xc7, 0x7a, 0x67, 0xd1, 0xee, 0x9f, 0x71, 0x66, 0xbd, 0x9b, 0xc9, 0xf3,
	0x98, 0x5f, 0xd5, 0xcc, 0x94, 0x22, 0x1c, 0x56, 0xc7, 0xbb, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x19, 0x93, 0xa5, 0xc8, 0xf4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DarksideStreamerClient is the client API for DarksideStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DarksideStreamerClient interface {
	DarksideGetIncomingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DarksideStreamer_DarksideGetIncomingTransactionsClient, error)
	DarksideSetState(ctx context.Context, in *DarksideLightwalletdState, opts ...grpc.CallOption) (*Empty, error)
}

type darksideStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewDarksideStreamerClient(cc grpc.ClientConnInterface) DarksideStreamerClient {
	return &darksideStreamerClient{cc}
}

func (c *darksideStreamerClient) DarksideGetIncomingTransactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DarksideStreamer_DarksideGetIncomingTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DarksideStreamer_serviceDesc.Streams[0], "/cash.z.wallet.sdk.rpc.DarksideStreamer/DarksideGetIncomingTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &darksideStreamerDarksideGetIncomingTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarksideStreamer_DarksideGetIncomingTransactionsClient interface {
	Recv() (*RawTransaction, error)
	grpc.ClientStream
}

type darksideStreamerDarksideGetIncomingTransactionsClient struct {
	grpc.ClientStream
}

func (x *darksideStreamerDarksideGetIncomingTransactionsClient) Recv() (*RawTransaction, error) {
	m := new(RawTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darksideStreamerClient) DarksideSetState(ctx context.Context, in *DarksideLightwalletdState, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cash.z.wallet.sdk.rpc.DarksideStreamer/DarksideSetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DarksideStreamerServer is the server API for DarksideStreamer service.
type DarksideStreamerServer interface {
	DarksideGetIncomingTransactions(*Empty, DarksideStreamer_DarksideGetIncomingTransactionsServer) error
	DarksideSetState(context.Context, *DarksideLightwalletdState) (*Empty, error)
}

// UnimplementedDarksideStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedDarksideStreamerServer struct {
}

func (*UnimplementedDarksideStreamerServer) DarksideGetIncomingTransactions(req *Empty, srv DarksideStreamer_DarksideGetIncomingTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method DarksideGetIncomingTransactions not implemented")
}
func (*UnimplementedDarksideStreamerServer) DarksideSetState(ctx context.Context, req *DarksideLightwalletdState) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DarksideSetState not implemented")
}

func RegisterDarksideStreamerServer(s *grpc.Server, srv DarksideStreamerServer) {
	s.RegisterService(&_DarksideStreamer_serviceDesc, srv)
}

func _DarksideStreamer_DarksideGetIncomingTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarksideStreamerServer).DarksideGetIncomingTransactions(m, &darksideStreamerDarksideGetIncomingTransactionsServer{stream})
}

type DarksideStreamer_DarksideGetIncomingTransactionsServer interface {
	Send(*RawTransaction) error
	grpc.ServerStream
}

type darksideStreamerDarksideGetIncomingTransactionsServer struct {
	grpc.ServerStream
}

func (x *darksideStreamerDarksideGetIncomingTransactionsServer) Send(m *RawTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func _DarksideStreamer_DarksideSetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DarksideLightwalletdState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarksideStreamerServer).DarksideSetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cash.z.wallet.sdk.rpc.DarksideStreamer/DarksideSetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarksideStreamerServer).DarksideSetState(ctx, req.(*DarksideLightwalletdState))
	}
	return interceptor(ctx, in, info, handler)
}

var _DarksideStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cash.z.wallet.sdk.rpc.DarksideStreamer",
	HandlerType: (*DarksideStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DarksideSetState",
			Handler:    _DarksideStreamer_DarksideSetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DarksideGetIncomingTransactions",
			Handler:       _DarksideStreamer_DarksideGetIncomingTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "darkside.proto",
}
